// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.2.4 (swiftlang-1103.0.32.9 clang-1103.0.32.53)
// swift-module-flags: -target arm64-apple-ios11.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name FlyBuy
import CoreLocation
@_exported import FlyBuy
import Foundation
import SQLite3
import Swift
import UIKit
public struct AppConfig : Swift.Codable {
  public let data: FlyBuy.AppConfigData?
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public struct PickupLocationFilters : Swift.Codable {
  public let ios: [FlyBuy.PickupLocationFilterData]?
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public class PickupLocationFilterData : Swift.Codable {
  final public let proximityToSite: Swift.Int
  final public let _desiredAccuracy: Swift.String
  final public let _activityType: Swift.String
  final public let distanceFilterCharging: Swift.Double
  final public let distanceFilterNotCharging: Swift.Double
  public init(proximityToSite: Swift.Int, desiredAccuracy: Swift.String, activityType: Swift.String, distanceFilterCharging: Swift.Double, distanceFilterNotCharging: Swift.Double)
  required public init(from decoder: Swift.Decoder) throws
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
}
extension PickupLocationFilterData {
  public static var defaultLocationFilter: FlyBuy.PickupLocationFilterData {
    get
  }
}
@objc(FlyBuyCustomerConsent) open class CustomerConsent : ObjectiveC.NSObject, Swift.Codable {
  @objc final public let termsOfService: Swift.Bool
  @objc final public let ageVerification: Swift.Bool
  @objc public init(termsOfService: Swift.Bool, ageVerification: Swift.Bool)
  @objc deinit
  @objc override dynamic public init()
  required public init(from decoder: Swift.Decoder) throws
  open func encode(to encoder: Swift.Encoder) throws
}
extension SQLite {
  public enum Error : Swift.Error {
    case onOpen(Swift.Int32, Swift.String)
    case onClose(Swift.Int32)
    case onPrepareStatement(Swift.Int32, Swift.String)
    case onGetParameterIndex(Swift.String)
    case onBindParameter(Swift.Int32, Swift.Int32, FlyBuy.SQLite.Value)
    case onStep(Swift.Int32, Swift.String)
    case onGetColumnType(Swift.Int32)
  }
}
extension SQLite.Error : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
@objc(FlyBuyUpdateOrderInfo) open class UpdateOrderInfo : ObjectiveC.NSObject, Swift.Codable {
  @objc public init(pushToken: Swift.String)
  @objc deinit
  @objc override dynamic public init()
  required public init(from decoder: Swift.Decoder) throws
  open func encode(to encoder: Swift.Encoder) throws
}
@_hasMissingDesignatedInitializers @objc(FlyBuyCreateOrderInfo) open class CreateOrderInfo : ObjectiveC.NSObject, Swift.Codable {
  @objc public init(siteID: Swift.Int, partnerIdentifier: Swift.String, customerCarColor: Swift.String?, customerCarType: Swift.String?, customerLicensePlate: Swift.String?, customerName: Swift.String?, customerPhone: Swift.String?, pushToken: Swift.String?, state: Swift.String?, pickupWindow: FlyBuy.PickupWindow? = nil)
  @objc public init(siteID: Swift.Int, partnerIdentifier: Swift.String, customerCarColor: Swift.String?, customerCarType: Swift.String?, customerLicensePlate: Swift.String?, customerName: Swift.String?, customerPhone: Swift.String?, pushToken: Swift.String?, pickupWindow: FlyBuy.PickupWindow? = nil)
  @objc deinit
  @objc override dynamic public init()
  required public init(from decoder: Swift.Decoder) throws
  open func encode(to encoder: Swift.Encoder) throws
}
public struct BeaconIdentifiers : Swift.Hashable, Swift.Codable {
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
  public static func == (a: FlyBuy.BeaconIdentifiers, b: FlyBuy.BeaconIdentifiers) -> Swift.Bool
}
public struct Beacon {
}
extension Beacon : Swift.Encodable {
  public func encode(to encoder: Swift.Encoder) throws
}
@_inheritsConvenienceInitializers @objc(FlyBuyBeaconList) public class BeaconList : ObjectiveC.NSObject {
  public var beacons: Swift.Dictionary<FlyBuy.BeaconIdentifiers, FlyBuy.Beacon>
  public func addScan(identifiers ids: FlyBuy.BeaconIdentifiers, rssi: Swift.Int, distance: Swift.Float)
  public func addScan(_ beacon: CoreLocation.CLBeacon)
  public func addScans(_ scannedBeacons: [CoreLocation.CLBeacon])
  public func removeStale()
  public func asArray() -> [FlyBuy.Beacon]
  @objc deinit
  @objc override dynamic public init()
}
extension BeaconList : Swift.Encodable {
  public func encode(to encoder: Swift.Encoder) throws
}
@usableFromInline
internal protocol _AnyEncodable {
  var value: Any { get }
  init<T>(_ value: T?)
}
extension _AnyEncodable {
  public func encode(to encoder: Swift.Encoder) throws
}
extension _AnyEncodable {
  public init(nilLiteral _: ())
  public init(booleanLiteral value: Swift.Bool)
  public init(integerLiteral value: Swift.Int)
  public init(floatLiteral value: Swift.Double)
  public init(extendedGraphemeClusterLiteral value: Swift.String)
  public init(stringLiteral value: Swift.String)
  public init(arrayLiteral elements: Any...)
  public init(dictionaryLiteral elements: (Swift.AnyHashable, Any)...)
}
open class EncodableRequest<EncodableObject> where EncodableObject : Swift.Encodable {
  final public let object: EncodableObject
  final public let encoder: Foundation.JSONEncoder
  public init(object: EncodableObject, encoder: Foundation.JSONEncoder = JSONEncoder())
  @objc deinit
}
@objc(FlyBuySite) open class Site : ObjectiveC.NSObject, Swift.Decodable {
  @objc final public let id: Swift.Int
  @objc final public let partnerIdentifier: Swift.String?
  @objc final public let name: Swift.String?
  @objc final public let phone: Swift.String?
  @objc final public let streetAddress: Swift.String?
  @objc final public let fullAddress: Swift.String?
  @objc final public let locality: Swift.String?
  @objc final public let region: Swift.String?
  @objc final public let country: Swift.String?
  @objc final public let postalCode: Swift.String?
  @objc final public let longitude: Swift.String?
  @objc final public let latitude: Swift.String?
  @objc final public let instructions: Swift.String?
  @objc final public let descriptionText: Swift.String?
  @objc final public let coverPhotoURL: Swift.String?
  @objc final public let projectAccentColor: Swift.String?
  @objc final public let projectAccentTextColor: Swift.String?
  @objc final public let projectLogoURL: Swift.String?
  @objc final public let geofence: FlyBuy.Geofence?
  @objc public func location() -> CoreLocation.CLLocation?
  @objc public func distance(from loc: CoreLocation.CLLocation) -> Foundation.NSNumber?
  @objc deinit
  required public init(from decoder: Swift.Decoder) throws
}
public typealias SQLiteArguments = [Swift.String : FlyBuy.SQLite.Value]
public typealias SQLiteRow = [Swift.String : FlyBuy.SQLite.Value]
extension SQLite {
  public enum Value {
    case data(Foundation.Data)
    case double(Swift.Double)
    case integer(Swift.Int64)
    case null
    case text(Swift.String)
  }
}
extension SQLite.Value {
  public init(rawValue: Swift.OpaquePointer)
}
extension SQLite.Value {
  public var boolValue: Swift.Bool? {
    get
  }
  public var dataValue: Foundation.Data? {
    get
  }
  public var doubleValue: Swift.Double? {
    get
  }
  public var intValue: Swift.Int? {
    get
  }
  public var int64Value: Swift.Int64? {
    get
  }
  public var stringValue: Swift.String? {
    get
  }
}
extension SQLite.Value : Swift.Hashable {
  public static func == (lhs: FlyBuy.SQLite.Value, rhs: FlyBuy.SQLite.Value) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@objc(FlyBuyGeofence) open class Geofence : ObjectiveC.NSObject, Swift.Decodable {
  @objc final public let latitude: Swift.String
  @objc final public let longitude: Swift.String
  @objc final public let radiusMeters: Swift.Double
  public func locationCoordinate() -> CoreLocation.CLLocationCoordinate2D?
  @objc deinit
  required public init(from decoder: Swift.Decoder) throws
}
extension SQLite {
  final public class Encoder {
    public enum Error : Swift.Error {
      case invalidType(Any)
      case invalidValue(Any)
      case invalidJSON(Foundation.Data)
      case transactionFailed
    }
    public init(_ database: FlyBuy.SQLite.Database)
    final public func encode<T>(_ value: T, using sql: FlyBuy.SQL) throws where T : Swift.Encodable
    @objc deinit
  }
}
@objc(FlyBuyCustomerInfo) open class CustomerInfo : ObjectiveC.NSObject, Swift.Codable {
  @objc final public let name: Swift.String
  @objc final public let carType: Swift.String?
  @objc final public let carColor: Swift.String?
  @objc final public let licensePlate: Swift.String?
  @objc final public let phone: Swift.String?
  @objc public init(name: Swift.String, carType: Swift.String?, carColor: Swift.String?, licensePlate: Swift.String?, phone: Swift.String? = nil)
  public static let defaultsKeyPaths: [(key: FlyBuy.UserDefaultsKey, keyPath: Swift.PartialKeyPath<FlyBuy.CustomerInfo>)]
  @objc override dynamic public init()
  required public init(from decoder: Swift.Decoder) throws
  @objc deinit
  open func encode(to encoder: Swift.Encoder) throws
}
extension SQLite {
  final public class Decoder {
    public enum Error : Swift.Error {
      case incorrectNumberOfResults(Swift.Int)
      case missingValueForKey(Swift.String)
      case invalidDate(Swift.String)
      case invalidURL(Swift.String)
      case invalidUUID(Swift.String)
      case invalidJSON(Swift.String)
    }
    public init(_ database: FlyBuy.SQLite.Database)
    final public func decode<T>(_ type: T.Type, using sql: FlyBuy.SQL, arguments: FlyBuy.SQLiteArguments = [:]) throws -> T? where T : Swift.Decodable
    final public func decode<T>(_ type: [T].Type, using sql: FlyBuy.SQL, arguments: FlyBuy.SQLiteArguments = [:]) throws -> [T] where T : Swift.Decodable
    @objc deinit
  }
}
@objc public enum LocationAuthStatus : Swift.Int, Swift.Codable {
  case notDetermined
  case restricted
  case denied
  case authorizedAlways
  case authorizedWhenInUse
  public init(from decoder: Swift.Decoder) throws
  public init?(from authStatus: CoreLocation.CLAuthorizationStatus)
  public init?(from string: Swift.String)
  public func encode(to encoder: Swift.Encoder) throws
  public var description: Swift.String {
    get
  }
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
public typealias SQL = Swift.String
public struct SQLite {
}
@_hasMissingDesignatedInitializers @objc(FlyBuyPagination) public class Pagination : ObjectiveC.NSObject {
  @objc final public let currentPage: Swift.Int
  @objc final public let totalPages: Swift.Int
  @objc deinit
  @objc override dynamic public init()
}
@objc open class FlyBuyError : ObjectiveC.NSObject, Foundation.LocalizedError {
  public var errorDescription: Swift.String? {
    get
  }
  final public let title: Swift.String
  public init(_ description: Swift.String?, context: Any? = nil)
  convenience public init(_ error: Swift.Error?, context: Any? = nil)
  @objc override dynamic public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc public class FlyBuyErrorInvalidURL : FlyBuy.FlyBuyError {
  @objc deinit
  override public init(_ description: Swift.String?, context: Any? = super)
}
@_hasMissingDesignatedInitializers @objc public class FlyBuyErrorInvalidResponse : FlyBuy.FlyBuyError {
  @objc deinit
  override public init(_ description: Swift.String?, context: Any? = super)
}
public enum HTTPStatusCode : Swift.Int {
  case ok
  case accepted
  case noContent
  case unauthorized
  case notFound
  case gone
  case unprocessableEntity
  case appUpgradeRequired
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers @objc public class FlyBuyAPIError : FlyBuy.FlyBuyError {
  final public let statusCode: FlyBuy.HTTPStatusCode?
  public var errors: [Swift.String : [Swift.String]]? {
    get
  }
  final public let appUpgradeURL: Foundation.URL?
  @objc deinit
  override public init(_ description: Swift.String?, context: Any? = super)
}
@objc(FlyBuyClaimOrderInfo) open class ClaimOrderInfo : ObjectiveC.NSObject, Swift.Codable {
  @objc public init(customerCarColor: Swift.String?, customerCarType: Swift.String?, customerLicensePlate: Swift.String?, customerName: Swift.String?, customerPhone: Swift.String?, pushToken: Swift.String)
  @objc public init(customerInfo: FlyBuy.CustomerInfo, pushToken: Swift.String, pickupType: Swift.String?)
  public func encode(to encoder: Swift.Encoder) throws
  @objc deinit
  @objc override dynamic public init()
  required public init(from decoder: Swift.Decoder) throws
}
@objc(FlyBuyOrderEvent) open class OrderEvent : ObjectiveC.NSObject, Swift.Encodable {
  public init(orderID: Swift.Int, location: CoreLocation.CLLocation, beacons: [FlyBuy.Beacon], etaSeconds: Foundation.NSNumber?)
  @objc public init(orderID: Swift.Int, customerState: Swift.String, etaSeconds: Foundation.NSNumber?)
  @objc public init(orderID: Swift.Int, state: Swift.String)
  @objc public init(orderID: Swift.Int, locationAuthStatus: FlyBuy.LocationAuthStatus)
  @objc public init(orderID: Swift.Int, customerRating: Swift.Int, customerComments: Swift.String?)
  @objc deinit
  @objc override dynamic public init()
  open func encode(to encoder: Swift.Encoder) throws
}
public struct AppConfigData : Swift.Codable {
  public let name: Swift.String?
  public let pickupLocationFilters: FlyBuy.PickupLocationFilters?
  public let pickupStates: FlyBuy.PickupStates?
  public let notifyMaxSites: Swift.Int?
  public let nearbySitesFeatureUrl: Swift.String?
  public let upgrade: FlyBuy.AppUpgrade?
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public struct BeaconRegion : Swift.Codable, Swift.Hashable {
  public let uuid: Foundation.UUID
  public let major: Swift.UInt16?
  public let minor: Swift.UInt16?
  public func region() -> CoreLocation.CLBeaconRegion
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: FlyBuy.BeaconRegion, b: FlyBuy.BeaconRegion) -> Swift.Bool
}
public protocol FlyBuyModuleManager {
  func configUpdated(_ config: FlyBuy.AppConfig)
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(FlyBuyCore) public class Core : ObjectiveC.NSObject {
  @objc public static let orders: FlyBuy.OrdersManager
  @objc public static let customer: FlyBuy.CustomerManager
  @objc public static let sites: FlyBuy.SitesManager
  @objc public static let config: FlyBuy.ConfigurationManager
  @objc public static let logger: FlyBuy.Logger
  @objc public static func configure(_ opts: [Swift.String : Any])
  @objc public static func handleRemoteNotification(_ data: [Swift.AnyHashable : Any])
  @objc public static func updatePushToken(_ newPushToken: Swift.String)
  @objc public static func updateAPNPushToken(_ deviceToken: Foundation.Data)
  @objc deinit
}
@usableFromInline
internal protocol _AnyDecodable {
  var value: Any { get }
  init<T>(_ value: T?)
}
extension _AnyDecodable {
  public init(from decoder: Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers @objc(FlyBuyRequestPasswordReset) open class RequestPasswordReset : ObjectiveC.NSObject, Swift.Codable {
  @objc deinit
  @objc override dynamic public init()
  required public init(from decoder: Swift.Decoder) throws
  open func encode(to encoder: Swift.Encoder) throws
}
@objc(FlyBuySetNewPassword) open class SetNewPassword : ObjectiveC.NSObject, Swift.Codable {
  @objc public init(resetPasswordToken: Swift.String, password: Swift.String, confirmation: Swift.String)
  @objc override dynamic public init()
  required public init(from decoder: Swift.Decoder) throws
  @objc deinit
  open func encode(to encoder: Swift.Encoder) throws
}
extension SQLite {
  final public class Database {
    final public var userVersion: Swift.Int {
      get
      set
    }
    final public var hasOpenTransactions: Swift.Bool {
      get
    }
    public init(path: Swift.String) throws
    @objc deinit
    final public func close()
    final public func inTransaction(_ block: () throws -> Swift.Void) throws -> Swift.Bool
    final public func write(_ sql: FlyBuy.SQL, arguments: FlyBuy.SQLiteArguments) throws
    final public func read(_ sql: FlyBuy.SQL, arguments: FlyBuy.SQLiteArguments) throws -> [FlyBuy.SQLiteRow]
    @discardableResult
    final public func execute(raw sql: FlyBuy.SQL) throws -> [FlyBuy.SQLiteRow]
  }
}
extension SQLite.Database : Swift.Equatable {
  public static func == (lhs: FlyBuy.SQLite.Database, rhs: FlyBuy.SQLite.Database) -> Swift.Bool
}
public enum UserDefaultsKey : Swift.String, Swift.CaseIterable {
  case customerToken
  case customerName
  case customerEmail
  case customerVehicleType
  case customerVehicleColor
  case customerLicensePlate
  case customerPhone
  case apiBase
  case lastKnownAuthStatus
  case migrationVersion
  public func stringValue() -> Swift.String?
  public func namespacedKey() -> Swift.String
  public func boolValue() -> Swift.Bool
  public func set(value: Swift.String?)
  public func set(bool: Swift.Bool)
  public func delete()
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
  public typealias AllCases = [FlyBuy.UserDefaultsKey]
  public static var allCases: [FlyBuy.UserDefaultsKey] {
    get
  }
}
extension UserDefaults {
  public func string(forKey key: FlyBuy.UserDefaultsKey) -> Swift.String?
}
@_hasMissingDesignatedInitializers @objc(FlyBuyCustomer) open class Customer : ObjectiveC.NSObject, Swift.Decodable {
  @objc final public let token: Swift.String
  @objc final public let emailAddress: Swift.String?
  @objc final public let info: FlyBuy.CustomerInfo
  @objc public var registered: Swift.Bool {
    @objc get
  }
  required public init(from decoder: Swift.Decoder) throws
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(FlyBuyConfigurationManager) public class ConfigurationManager : ObjectiveC.NSObject {
  public func fetch(forceFetch: Swift.Bool = false)
  @objc override dynamic public init()
  @objc deinit
}
@objc(FlyBuyPickupWindow) public class PickupWindow : ObjectiveC.NSObject, Swift.Codable {
  @objc final public let start: Foundation.Date
  @objc final public let end: Foundation.Date
  @objc public init(start: Foundation.Date, end: Foundation.Date)
  @objc convenience public init(_ date: Foundation.Date)
  required convenience public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(FlyBuySitesManager) open class SitesManager : ObjectiveC.NSObject {
  @objc public var all: [FlyBuy.Site]? {
    get
  }
  @objc public func fetch(query: Swift.String? = nil, page: Swift.Int = 1, callback: (([FlyBuy.Site]?, FlyBuy.Pagination?, Swift.Error?) -> (Swift.Void))? = nil)
  @objc public func fetch(region: CoreLocation.CLCircularRegion, page: Swift.Int = 1, callback: (([FlyBuy.Site]?, Swift.Error?) -> (Swift.Void))? = nil)
  @objc public func fetch(region: CoreLocation.CLCircularRegion, page: Swift.Int, per: Swift.Int, callback: (([FlyBuy.Site]?, Swift.Error?) -> (Swift.Void))? = nil)
  @objc public func fetchAll(query: Swift.String? = nil, callback: (([FlyBuy.Site]?, Swift.Error?) -> (Swift.Void))? = nil)
  @objc override dynamic public init()
  @objc deinit
}
extension Optional where Wrapped == Swift.String {
  public var presence: Swift.String? {
    get
  }
}
extension String {
  public var wordsFromCamelCase: Swift.String {
    get
  }
}
extension String : Swift.Error {
}
@objc public class AppUpgrade : ObjectiveC.NSObject, Swift.Codable {
  final public let required: Swift.Bool
  final public let url: Swift.String
  final public let version: Swift.String
  final public let message: Swift.String
  @objc deinit
  required public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public struct PickupStates : Swift.Codable {
  public let order: [Swift.String]?
  public let openOrder: [Swift.String]?
  public let customer: [Swift.String]?
  public let openCustomer: [Swift.String]?
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
@_inheritsConvenienceInitializers @objc(FlyBuyOrdersManager) open class OrdersManager : ObjectiveC.NSObject {
  @objc public var all: [FlyBuy.Order] {
    @objc get
  }
  @objc public var open: [FlyBuy.Order] {
    @objc get
  }
  @objc public var closed: [FlyBuy.Order] {
    @objc get
  }
  @objc public var orderStates: [Swift.String]
  @objc public var customerStates: [Swift.String]
  @objc override dynamic public init()
  @objc public func fetch(callback: (([FlyBuy.Order]?, Swift.Error?) -> (Swift.Void))? = nil)
  @objc public func fetch(withRedemptionCode redemptionCode: Swift.String, callback: ((FlyBuy.Order?, Swift.Error?) -> (Swift.Void))? = nil)
  @objc public func claim(withRedemptionCode redemptionCode: Swift.String, customerInfo: FlyBuy.CustomerInfo, pickupType: Swift.String? = nil, callback: ((FlyBuy.Order?, Swift.Error?) -> (Swift.Void))? = nil)
  @objc public func create(siteID: Swift.Int, partnerIdentifier: Swift.String, customerInfo: FlyBuy.CustomerInfo, pickupWindow: FlyBuy.PickupWindow? = nil, state: Swift.String, callback: ((FlyBuy.Order?, Swift.Error?) -> (Swift.Void))?)
  @objc public func create(siteID: Swift.Int, partnerIdentifier: Swift.String, customerInfo: FlyBuy.CustomerInfo, pickupWindow: FlyBuy.PickupWindow? = nil, callback: ((FlyBuy.Order?, Swift.Error?) -> (Swift.Void))?)
  public func event(info: FlyBuy.OrderEvent, callback: ((FlyBuy.Order?, Swift.Error?) -> ())? = nil)
  @objc public func updateCustomerState(orderID: Swift.Int, customerState: Swift.String, callback: ((FlyBuy.Order?, Swift.Error?) -> (Swift.Void))? = nil)
  @objc public func updateOrderState(orderID: Swift.Int, state: Swift.String, callback: ((FlyBuy.Order?, Swift.Error?) -> (Swift.Void))? = nil)
  @objc public func rateOrder(orderID: Swift.Int, rating: Swift.Int, comments: Swift.String? = nil, callback: ((FlyBuy.Order?, Swift.Error?) -> (Swift.Void))? = nil)
  @objc deinit
}
extension NSNotification.Name {
  public static let ordersUpdated: Foundation.Notification.Name
  public static let ordersError: Foundation.Notification.Name
  public static let orderUpdated: Foundation.Notification.Name
  public static let orderEventError: Foundation.Notification.Name
}
@_hasMissingDesignatedInitializers @objc(FlyBuyOrdersManagerError) public class OrdersManagerError : FlyBuy.FlyBuyError {
  override public init(_ description: Swift.String?, context: Any? = super)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(FlyBuyCustomerManager) public class CustomerManager : ObjectiveC.NSObject {
  @objc public var current: FlyBuy.Customer? {
    @objc get
  }
  @objc public func create(_ customerInfo: FlyBuy.CustomerInfo, termsOfService: Swift.Bool, ageVerification: Swift.Bool, callback: ((FlyBuy.Customer?, Swift.Error?) -> (Swift.Void))? = nil)
  @objc public func create(_ customerInfo: FlyBuy.CustomerInfo, email: Swift.String, password: Swift.String, customerConsent: FlyBuy.CustomerConsent, callback: ((FlyBuy.Customer?, Swift.Error?) -> (Swift.Void))? = nil)
  @objc public func update(_ customerInfo: FlyBuy.CustomerInfo, callback: ((FlyBuy.Customer?, Swift.Error?) -> (Swift.Void))? = nil)
  @objc public func login(emailAddress: Swift.String, password: Swift.String, callback: ((FlyBuy.Customer?, Swift.Error?) -> (Swift.Void))? = nil)
  @objc public func loginWithToken(token: Swift.String, callback: ((FlyBuy.Customer?, Swift.Error?) -> (Swift.Void))? = nil)
  @objc public func signUp(emailAddress: Swift.String, password: Swift.String, callback: ((FlyBuy.Customer?, Swift.Error?) -> (Swift.Void))? = nil)
  @objc public func requestNewPassword(emailAddress: Swift.String, callback: ((Swift.Error?) -> (Swift.Void))? = nil)
  @objc public func setNewPassword(resetPasswordToken: Swift.String, password: Swift.String, confirmation: Swift.String, callback: ((FlyBuy.Customer?, Swift.Error?) -> (Swift.Void))? = nil)
  @objc public func logout()
  @objc override dynamic public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc(FlyBuyCustomerManagerError) public class CustomerManagerError : FlyBuy.FlyBuyError {
  @objc deinit
  override public init(_ description: Swift.String?, context: Any? = super)
}
@objc public enum LogLevel : Swift.Int {
  case verbose
  case debug
  case info
  case warning
  case error
  case none
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers @objc(FlyBuyLogger) final public class Logger : ObjectiveC.NSObject {
  final public var logLevel: FlyBuy.LogLevel
  final public func verbose(_ message: Any = "", filename: Swift.String = #file, function: Swift.String = #function, line: Swift.Int = #line)
  final public func debug(_ message: Any = "", filename: Swift.String = #file, function: Swift.String = #function, line: Swift.Int = #line)
  final public func info(_ message: Any = "", filename: Swift.String = #file, function: Swift.String = #function, line: Swift.Int = #line)
  final public func warning(_ message: Any = "", filename: Swift.String = #file, function: Swift.String = #function, line: Swift.Int = #line)
  final public func error(_ message: Any = "", filename: Swift.String = #file, function: Swift.String = #function, line: Swift.Int = #line)
  @objc override dynamic public init()
  @objc deinit
}
public struct CustomerResponse : Swift.Decodable {
  public init(from decoder: Swift.Decoder) throws
}
@objc(FlyBuySignUpInfo) open class SignUpInfo : ObjectiveC.NSObject, Swift.Codable {
  @objc final public let emailAddress: Swift.String
  @objc final public let password: Swift.String
  @objc final public let passwordConfirmation: Swift.String
  @objc public init(emailAddress: Swift.String, password: Swift.String, passwordConfirmation: Swift.String)
  @objc override dynamic public init()
  required public init(from decoder: Swift.Decoder) throws
  @objc deinit
  open func encode(to encoder: Swift.Encoder) throws
}
@objc(FlyBuyLoginInfo) open class LoginInfo : ObjectiveC.NSObject, Swift.Codable {
  @objc final public let emailAddress: Swift.String
  @objc final public let password: Swift.String
  @objc public init(emailAddress: Swift.String, password: Swift.String)
  @objc override dynamic public init()
  required public init(from decoder: Swift.Decoder) throws
  @objc deinit
  open func encode(to encoder: Swift.Encoder) throws
}
@objc(FlyBuyOrder) open class Order : ObjectiveC.NSObject {
  @objc final public let id: Swift.Int
  @objc final public let siteID: Swift.Int
  @objc public var state: Swift.String
  @objc public var customerState: Swift.String
  @objc final public let partnerIdentifier: Swift.String?
  @objc final public let redemptionCode: Swift.String?
  @objc final public let redeemedAt: Foundation.Date?
  @objc final public let displayName: Swift.String?
  @objc final public let pickupWindow: FlyBuy.PickupWindow?
  @objc public var pickupType: Swift.String?
  @objc public var etaAt: Foundation.Date?
  @objc public var completedAt: Foundation.Date?
  @objc public var createdAt: Foundation.Date?
  @objc public var updatedAt: Foundation.Date?
  @objc public var customerRating: Swift.String?
  @objc public var customerComment: Swift.String?
  @objc final public let siteName: Swift.String?
  @objc final public let sitePhone: Swift.String?
  @objc final public let siteStreetAddress: Swift.String?
  @objc final public let siteFullAddress: Swift.String?
  @objc final public let siteLocality: Swift.String?
  @objc final public let siteRegion: Swift.String?
  @objc final public let siteCountry: Swift.String?
  @objc final public let sitePostalCode: Swift.String?
  @objc final public let siteLongitude: Swift.String?
  @objc final public let siteLatitude: Swift.String?
  @objc final public let siteInstructions: Swift.String?
  @objc final public let siteDescription: Swift.String?
  @objc final public let siteCoverPhotoURL: Swift.String?
  final public let siteBeaconRegions: [FlyBuy.BeaconRegion]?
  @objc final public let sitePartnerIdentifier: Swift.String?
  @objc final public let projectAccentColor: Swift.String?
  @objc final public let projectAccentTextColor: Swift.String?
  @objc final public let projectLogoURL: Swift.String?
  @objc final public let customerName: Swift.String?
  @objc final public let customerCarType: Swift.String?
  @objc final public let customerCarColor: Swift.String?
  @objc final public let customerLicensePlate: Swift.String?
  @objc final public let projectMobileFlowAlwaysShowVehicleInfoFields: Swift.Bool
  @objc final public let projectMobileFlowCustomerNameEditingEnabled: Swift.Bool
  @objc final public let projectMobileFlowPickupTypeSelectionEnabled: Swift.Bool
  @objc final public let projectMobileFlowRequireVehicleInfoIfVisible: Swift.Bool
  @objc final public let curbsideLocalizedString: Swift.String?
  @objc final public let pickupLocalizedString: Swift.String?
  @objc public var pushToken: Swift.String?
  public var isLocationTrackingEnabled: Swift.Bool?
  required public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
  @objc public func siteLocation() -> CoreLocation.CLLocation?
  @objc public func siteDistance(from location: CoreLocation.CLLocation) -> Foundation.NSNumber?
  @objc public var customerID: Foundation.NSNumber? {
    @objc get
  }
  @objc deinit
  @objc override dynamic public init()
}
extension Order {
  public func isOpen() -> Swift.Bool
}
extension FlyBuy.LocationAuthStatus : Swift.Equatable {}
extension FlyBuy.LocationAuthStatus : Swift.Hashable {}
extension FlyBuy.LocationAuthStatus : Swift.RawRepresentable {}
extension FlyBuy.HTTPStatusCode : Swift.Equatable {}
extension FlyBuy.HTTPStatusCode : Swift.Hashable {}
extension FlyBuy.HTTPStatusCode : Swift.RawRepresentable {}
extension FlyBuy.UserDefaultsKey : Swift.Equatable {}
extension FlyBuy.UserDefaultsKey : Swift.Hashable {}
extension FlyBuy.UserDefaultsKey : Swift.RawRepresentable {}
extension FlyBuy.LogLevel : Swift.Equatable {}
extension FlyBuy.LogLevel : Swift.Hashable {}
extension FlyBuy.LogLevel : Swift.RawRepresentable {}
extension FlyBuy.Order : Swift.Encodable {}
extension FlyBuy.Order : Swift.Decodable {}
