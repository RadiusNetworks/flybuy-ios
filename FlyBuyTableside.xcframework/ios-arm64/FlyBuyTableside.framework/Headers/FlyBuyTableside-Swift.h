// Generated by Apple Swift version 5.6 (swiftlang-5.6.0.323.62 clang-1316.0.20.8)
#ifndef FLYBUYTABLESIDE_SWIFT_H
#define FLYBUYTABLESIDE_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import Foundation;
@import ObjectiveC;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="FlyBuyTableside",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif



enum FlyBuyAPIErrorType : NSInteger;
@class NSString;

SWIFT_CLASS_NAMED("FlyBuyAPIError")
@interface FlyBuyAPIError : NSObject
@property (nonatomic, readonly) enum FlyBuyAPIErrorType type;
@property (nonatomic, readonly) NSInteger statusCodeInt;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, FlyBuyAPIErrorType, open) {
  FlyBuyAPIErrorTypeInvalidResponse = 0,
  FlyBuyAPIErrorTypeResponseError = 1,
};


@protocol TablesideSiteMonitorDelegate;
@class TablesideSite;
@class TablesideLocator;

/// Manager for Tableside operations
/// See <a href="https://www.radiusnetworks.com/developers/flybuy/#/">Flybuy Developer Docs</a> for additional details including all setup steps.
SWIFT_CLASS_NAMED("Manager")
@interface FlyBuyTablesideManager : NSObject
/// The shared <code>FlyBuyTablesideManager</code> instance.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) FlyBuyTablesideManager * _Nonnull shared;)
+ (FlyBuyTablesideManager * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
/// Declares the max payload size when creating a locator.
@property (nonatomic, readonly) NSInteger maxPayloadSize;
/// The configured API token string. Read-only.
@property (nonatomic, readonly, copy) NSString * _Nullable apiToken;
/// The configured kit ID string. Read-only.
@property (nonatomic, readonly, copy) NSString * _Nullable kitID;
/// The site monitor delegate. Must conform to <code>TablesideSiteMonitorDelegate</code>
@property (nonatomic, strong) id <TablesideSiteMonitorDelegate> _Nullable delegate;
/// Configure and initialize the tableside module.
/// The Tableside SDK must be initialized when the application starts in order to configure the kitId and apiToken and handle appropriate lifecycle methods. Note that the app authorization token for Tableside is not the same token as the other Flybuy SDK modules.
/// The Tableside SDK is currently independent of the rest of the Flybuy SDK in order to support legacy Tableside installations. It needs to be initialized with its own app authorization token as follows.
/// Flybuy needs to be setup and configured at application launch. However, it does not run in the background or use device resources until there is an active locator.
/// Example:
/// \code
/// func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -> Bool {
///   FlyBuyTableside.Manager.shared.configure([kitID: "KIT_ID_HERE", apiToken: "TOKEN_HERE"])
///   return true
/// }
///
/// \endcode\param kitID The kit ID string.
///
/// \param apiToken The API token string.
///
- (void)configureWithKitID:(NSString * _Nonnull)kitID apiToken:(NSString * _Nonnull)apiToken;
/// Find site by referenceId.
/// The app can use this method to lookup the site needed for creating a locator.
/// Example:
/// \code
/// FlyBuyTableside.Manager.shared.findSites(referenceID: text) { sites, error in
///  if let error = error {
///    print("Error trying to retrieve sites")
///    return
///  }
///  if let sites = sites, let site = sites.first {
///    // Store a reference to the site
///  }
/// }
///
/// \endcode\param referenceID The reference ID string associated with the site.
///
/// \param callback Called with any matching <code>TablesideSite</code> if found or any error encountered.
///
- (void)findSitesWithReferenceID:(NSString * _Nonnull)referenceID callback:(void (^ _Nonnull)(NSArray<TablesideSite *> * _Nullable, NSError * _Nullable))callback;
/// Create a locator for the site.
/// Once a site is known (via the findSite method), a locator may be created.
/// To receive updates from the <code>TablesideLocator</code> (e.g. starting, stopping, and state updates), set the TablesideLocatorListener for the locator after it is created (as shown below).
/// Example:
/// \code
/// FlyBuyTableside.Manager.shared.createLocator(site: site, additionalData: optionalData) { (locator, error) -> (Void) in
///   if let error = error {
///   // Handle error
///   }
///   else {
///   // Set locator delegate
///   locator?.delegate = self
///   // Save locator or start it here
///   }
/// }
///
/// \endcode\param site The <code>TablesideSite</code> to create the locator for.
///
/// \param additionalData The payload string to be added to the locator. Optional
///
/// \param callback Called with the <code>TablesideLocator</code> if successfully created or any error encountered.
///
- (void)createLocatorWithSite:(TablesideSite * _Nonnull)site additionalData:(NSString * _Nullable)additionalData callback:(void (^ _Nonnull)(TablesideLocator * _Nullable, NSError * _Nullable))callback;
/// Release the locator for the site so the identifier can be reused.
/// Example:
/// \code
/// FlyBuyTableside.Manager.shared.releaseLocator(site: site, locator: locator) { error in
///   DispatchQueue.main.async {
///     if let error = error {
///       // handle error
///       return
///     }
///   }
/// }
///
/// \endcode\param site The <code>TablesideSite</code> to release the locator for.
///
/// \param locator The existing <code>TablesideLocator</code> to be released.
///
/// \param callback Called when the locator is successfully released or any error encountered.
///
- (void)releaseLocatorWithSite:(TablesideSite * _Nonnull)site locator:(TablesideLocator * _Nonnull)locator callback:(void (^ _Nonnull)(NSError * _Nullable))callback;
/// Start the locator when the application is ready to begin broadcasting.
/// Example:
/// \code
/// FlyBuyTableside.Manager.shared.start(locator) { (error) -> (Void) in
///   if let error = error {
///   // Handle error
///   }
///   else {
///   // Handle success
///   }
/// }
///
/// \endcode\param locator The <code>TablesideLocator</code> to be started.
///
- (void)start:(TablesideLocator * _Nonnull)locator;
/// Stop the active <code>TablesideLocator</code> when the transaction is complete.
/// note:
/// It is the responsibility of the app to call this method to stop the locator. Another locator may not be started without calling this first.
/// Example:
/// \code
/// if let error = FlyBuyTableside.Manager.shared.stop() as? TablesideError {
///  print("Error Description: \(error)")
///  let errorType = error.type
///  print("Error Type: \(errorType)")
/// }
///
/// \endcode
/// returns:
/// An error if encountered.
- (NSError * _Nullable)stop SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



@interface FlyBuyTablesideManager (SWIFT_EXTENSION(FlyBuyTableside))
/// Helper method for requesting the user’s permission to use location services regardless of whether the app is in use.
- (void)requestAlwaysAuthorization;
/// Helper method for requesting the user’s permission to use location services when the app is actively in use.
- (void)requestWhenInUseAuthorization;
@end

enum TablesideErrorType : NSInteger;

/// Error that may be returned from FlyBuyTablesideManager methods.
SWIFT_CLASS_NAMED("TablesideError")
@interface FlyBuyTablesideError : NSObject
/// Specifies the error type and contains a description of the error.
@property (nonatomic, readonly) enum TablesideErrorType type;
- (nonnull instancetype)init:(enum TablesideErrorType)typeIn OBJC_DESIGNATED_INITIALIZER;
/// Returns the string describing the error type.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// The type that may be associated with a TablesideError.
typedef SWIFT_ENUM(NSInteger, TablesideErrorType, open) {
  TablesideErrorTypeInvalidPayloadLength = 0,
  TablesideErrorTypeUnableToCreateLocator = 1,
  TablesideErrorTypeFailedToStartAdvertising = 2,
  TablesideErrorTypeAdvertiserAlreadyStarted = 3,
  TablesideErrorTypeLocatorNotStarted = 4,
  TablesideErrorTypeBluetoothPoweredOff = 5,
  TablesideErrorTypeBluetoothUnauthorized = 6,
  TablesideErrorTypeBluetoothUnsupported = 7,
  TablesideErrorTypeTablesideManagerNotConfigured = 8,
  TablesideErrorTypeNeedsLocationUsageKeys = 9,
  TablesideErrorTypeLocationPermissionInsufficient = 10,
};


/// Data model for the tableside locator
SWIFT_CLASS("_TtC15FlyBuyTableside16TablesideLocator")
@interface TablesideLocator : NSObject
@end


SWIFT_PROTOCOL("_TtP15FlyBuyTableside24TablesideLocatorDelegate_")
@protocol TablesideLocatorDelegate
@optional
- (void)locatorDidStart:(TablesideLocator * _Nonnull)locator;
- (void)locatorDidStop:(TablesideLocator * _Nonnull)locator;
- (void)locatorDidFail:(TablesideLocator * _Nonnull)locator error:(NSError * _Nonnull)error;
@end

typedef SWIFT_ENUM(NSInteger, TablesideLogLevel, open) {
  TablesideLogLevelVerbose = 0,
  TablesideLogLevelDebug = 1,
  TablesideLogLevelInfo = 2,
  TablesideLogLevelWarning = 3,
  TablesideLogLevelError = 4,
  TablesideLogLevelNone = 5,
};


SWIFT_CLASS_NAMED("TablesideLogger")
@interface FlyBuyLogger : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end




/// Data model for tableside site.
SWIFT_CLASS_NAMED("TablesideSite")
@interface TablesideSite : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, TablesideSiteEvent, open) {
  TablesideSiteEventEntered = 0,
  TablesideSiteEventExited = 1,
};


SWIFT_PROTOCOL("_TtP15FlyBuyTableside28TablesideSiteMonitorDelegate_")
@protocol TablesideSiteMonitorDelegate
@optional
- (void)siteMonitorDidFailWithError:(NSError * _Nonnull)error;
- (void)siteMonitorDidStop;
- (void)siteMonitorDidStart;
- (void)siteMonitor:(TablesideSite * _Nonnull)site didReceiveEvent:(enum TablesideSiteEvent)type;
@end

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif
